<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Matrix Rain Generator</title>
    <style>
        body {
            font-family: 'Courier New', Courier, monospace; /* Monospaced font for a techy feel */
            text-align: center;
            margin: 0;
            padding: 0;
            overflow: hidden; /* Hide scrollbars */
            background-color: #000; /* Black background for contrast */
            color: #00ff00; /* Default text color for matrix effect */
        }
        .container {
            position: relative;
            z-index: 10; /* Ensure the container is in the foreground */
            margin: 20px auto;
            width: 90%;
            max-width: 800px;
            background: rgba(0, 0, 0, 0.9); /* Dark background for container */
            padding: 20px;
            border-radius: 10px;
            box-shadow: 0 8px 30px rgba(0, 255, 0, 0.5); /* Green glow effect */
        }
        h1 {
            color: #00ff00; /* Title color */
            margin-bottom: 20px;
            text-shadow: 0 0 5px #00ff00; /* Glowing effect */
        }
        .input-section {
            margin: 10px 0;
            display: flex;
            flex-wrap: wrap;
            justify-content: space-between;
        }
        .input-pair {
            display: flex;
            align-items: center;
            margin-bottom: 10px;
            flex: 1; /* Allow flex-grow */
            max-width: 300px; /* Limit input pair width */
        }
        .input-pair label {
            margin-right: 10px;
            color: #fff; /* Label color */
        }
        input[type="text"], input[type="number"], input[type="color"], select {
            padding: 8px;
            margin-right: 10px;
            border-radius: 5px;
            border: 1px solid #00ff00; /* Matrix green borders */
            background-color: rgba(0, 0, 0, 0.6); /* Dark input background */
            color: #00ff00; /* Input text color */
        }
        button {
            padding: 10px 20px;
            background-color: #00cc00; /* Brighter green button */
            color: white;
            border: none;
            border-radius: 5px;
            cursor: pointer;
            font-size: 16px;
            transition: background-color 0.3s, transform 0.2s; /* Smooth transitions */
            margin-top: 10px;
        }
        button:hover {
            background-color: #009900; /* Darker green on hover */
            transform: scale(1.05); /* Slight scaling effect */
        }
        canvas {
            position: fixed;
            top: 0;
            left: 0;
            width: 100vw;
            height: 100vh;
            z-index: 1; /* Make sure the canvas is behind everything */
        }
    </style>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/gif.js/0.2.0/gif.js"></script>
    <script src="https://cdn.jsdelivr.net/npm/url-polyfill@1.1.3/polyfill.min.js"></script>
</head>
<body>
    <canvas id="matrixCanvas"></canvas>

    <div class="container">
        <h1>Matrix Rain Generator</h1>

        <div class="input-section">
            <div class="input-pair">
                <label for="textInput">Matrix Symbols:</label>
                <input type="text" id="textInput" placeholder="Enter symbols (e.g. 01)">
            </div>
            <div class="input-pair">
                <label for="symbolColor">Symbol Color:</label>
                <input type="color" id="symbolColor" value="#00ff00">
            </div>
            <div class="input-pair">
                <label for="bgColor">Background Color:</label>
                <input type="color" id="bgColor" value="#000000">
            </div>
            <div class="input-pair">
                <label for="fontStyle">Font Style:</label>
                <select id="fontStyle">
                    <option value="Arial">Arial</option>
                    <option value="Courier New">Courier New</option>
                    <option value="Georgia">Georgia</option>
                    <option value="Helvetica">Helvetica</option>
                    <option value="Verdana">Verdana</option>
                </select>
            </div>
            <div class="input-pair">
                <label for="fontSize">Font Size:</label>
                <input type="number" id="fontSize" value="16" min="10">
            </div>
            <div class="input-pair">
                <label for="rainSpeed">Rain Speed:</label>
                <input type="number" id="rainSpeed" value="50" min="10">
            </div>
            <div class="input-pair">
                <label for="density">Drop Density:</label>
                <input type="number" id="density" value="1" min="1" max="10" step="1">
            </div>
        </div>

        <button onclick="downloadImage()">Download PNG Wallpaper</button>
    </div>

    <script>
        let canvas = document.getElementById('matrixCanvas');
        let ctx = canvas.getContext('2d');

        // Set canvas dimensions to full screen
        canvas.width = window.innerWidth;
        canvas.height = window.innerHeight;

        let columns = Math.floor(canvas.width / 20);
        let drops = [];

        // Function to initialize drops based on density
        function initializeDrops() {
            const density = parseInt(document.getElementById('density').value) || 1;
            columns = Math.floor(canvas.width / 20);
            drops = new Array(columns * density).fill(0); // Initialize to 0 for better performance
        }

        // Initialize drops
        initializeDrops();

        // Generate random matrix symbols
        function randomSymbol() {
            const textInput = document.getElementById('textInput').value || '01';
            return textInput.charAt(Math.floor(Math.random() * textInput.length));
        }

        // Main function for drawing the matrix rain
        function drawMatrix() {
            const bgColor = document.getElementById('bgColor').value;
            const symbolColor = document.getElementById('symbolColor').value;
            const fontStyle = document.getElementById('fontStyle').value;
            const fontSize = document.getElementById('fontSize').value;

            ctx.fillStyle = bgColor + '10'; // Add transparency to make the symbols more visible
            ctx.fillRect(0, 0, canvas.width, canvas.height);

            ctx.fillStyle = symbolColor;
            ctx.font = `${fontSize}px ${fontStyle}`;

            const density = parseInt(document.getElementById('density').value) || 1;
            for (let i = 0; i < drops.length; i++) {
                let text = randomSymbol();
                let x = (i % columns) * 20; // Keep space based on symbol width
                let y = drops[i] * fontSize; // Adjust y based on font size

                ctx.fillText(text, x, y);

                // Reset the drop to the top of the screen
                if (y > canvas.height && Math.random() > 0.975) {
                    drops[i] = 0;
                }

                // Move the drop down
                drops[i]++;
            }
        }

        let lastTimestamp = 0;
        let rainSpeed = 50;

        // Function to continuously update the matrix with adjustable speed
        function startMatrixRain(timestamp) {
            if (lastTimestamp) {
                const delta = timestamp - lastTimestamp;
                if (delta >= rainSpeed) {
                    drawMatrix();
                    lastTimestamp = timestamp;
                }
            } else {
                lastTimestamp = timestamp;
            }
            requestAnimationFrame(startMatrixRain);
        }

        // Start the matrix rain initially
        startMatrixRain();

        // Event listener for window resize to adjust the canvas size dynamically
        window.addEventListener('resize', function() {
            canvas.width = window.innerWidth;
            canvas.height = window.innerHeight;
            initializeDrops();
        });

        // Event listener for density change
        document.getElementById('density').addEventListener('input', function() {
            initializeDrops(); // Reinitialize drops based on new density
        });

        // Event listener for rain speed change to adjust speed in real-time
        document.getElementById('rainSpeed').addEventListener('input', function() {
            rainSpeed = this.value;  // Update rain speed based on user input
        });

        // Function to download the canvas as a PNG
        function downloadImage() {
            const link = document.createElement('a');
            link.download = 'matrix_rain.png';
            link.href = canvas.toDataURL('image/png');
            link.click();
        }
    </script>
</body>
</html>
